generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model Tournament {
  id        String   @id @default(uuid())
  name      String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  stages    Stage[]
  teams     Team[]

  @@schema("public")
}

model Stage {
  id            String         @id @default(uuid())
  name          String
  type          StageType
  tournamentId  String
  advanceCount  Int?
  createdAt     DateTime       @default(now())
  advancedTeams AdvancedTeam[]
  groups        Group[]
  matches       Match[]
  tournament    Tournament     @relation(fields: [tournamentId], references: [id])

  @@schema("public")
}

model Group {
  id      String  @id @default(uuid())
  name    String
  stageId String
  stage   Stage   @relation(fields: [stageId], references: [id])
  matches Match[]
  teams   Team[]  @relation("GroupTeams")

  @@schema("public")
}

model Team {
  id            String         @id @default(uuid())
  name          String
  tournamentId  String
  advancedTeams AdvancedTeam[]
  matchesA      Match[]        @relation("TeamA")
  matchesB      Match[]        @relation("TeamB")
  players       Player[]
  tournament    Tournament     @relation(fields: [tournamentId], references: [id])
  groups        Group[]        @relation("GroupTeams")

  @@schema("public")
}

model Player {
  id     String @id @default(uuid())
  name   String
  number Int
  teamId String
  team   Team   @relation(fields: [teamId], references: [id])

  @@schema("public")
}

model Match {
  id        String      @id @default(uuid())
  stageId   String
  groupId   String?
  teamAId   String
  teamBId   String
  matchDate DateTime
  venue     String
  scoreA    Int?
  scoreB    Int?
  status    MatchStatus @default(SCHEDULED)
  group     Group?      @relation(fields: [groupId], references: [id])
  stage     Stage       @relation(fields: [stageId], references: [id])
  teamA     Team        @relation("TeamA", fields: [teamAId], references: [id])
  teamB     Team        @relation("TeamB", fields: [teamBId], references: [id])

  @@schema("public")
}

model AdvancedTeam {
  id        String   @id @default(uuid())
  stageId   String
  teamId    String
  createdAt DateTime @default(now())
  stage     Stage    @relation(fields: [stageId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])

  @@schema("public")
}

model profiles {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String   @unique @db.Uuid
  fullName   String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  role       String?

  @@schema("public")
}

enum StageType {
  GROUP
  KNOCKOUT

  @@schema("public")
}

enum MatchStatus {
  SCHEDULED
  COMPLETED
  LIVE

  @@schema("public")
}
